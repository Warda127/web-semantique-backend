version: '3.8'

services:
  # Apache Jena Fuseki - Using official Apache image
  fuseki:
    build:
      context: ./fuseki
      dockerfile: Dockerfile
    container_name: smartcity-fuseki
    ports:
      - "3030:3030"
    volumes:
      - fuseki-data:/fuseki
      - ./ontologie:/staging:ro
    environment:
      - JVM_ARGS=-Xmx2g
    networks:
      - smartcity-network
    healthcheck:
      test: [ "CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3030/$$/ping" ]
      interval: 20s
      timeout: 10s
      retries: 10
      start_period: 90s
    restart: unless-stopped

  # Flask Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: smartcity-backend
    ports:
      - "5000:5000"
    volumes:
      - ./app.py:/app/app.py
      - ./transport_mode:/app/transport_mode
      - ./travel_plan:/app/travel_plan
      - ./parking_station:/app/parking_station
      - ./ai_sparql_transformer.py:/app/ai_sparql_transformer.py
      - ./ontologie:/app/ontologie:ro
    environment:
      - FLASK_ENV=development
      - FUSEKI_QUERY=http://fuseki:3030/smartcity/query
      - FUSEKI_UPDATE=http://fuseki:3030/smartcity/update
      - FUSEKI_DATA=http://fuseki:3030/smartcity/data
    depends_on:
      fuseki:
        condition: service_healthy
    networks:
      - smartcity-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/persons"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  # Init container - creates dataset and loads ontology
  fuseki-init:
    image: curlimages/curl:latest
    container_name: smartcity-init
    depends_on:
      fuseki:
        condition: service_healthy
    volumes:
      - ./ontologie:/data:ro
    networks:
      - smartcity-network
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        echo "🚀 Starting Fuseki initialization..."
        
        # Wait extra time for Fuseki to be fully ready
        echo "⏳ Waiting for Fuseki to be fully operational..."
        sleep 15
        
        # Check if dataset exists (newer Fuseki API)
        echo "🔍 Checking if dataset 'smartcity' exists..."
        DATASET_EXISTS=$$(curl -s http://fuseki:3030/$$/datasets | grep -o "smartcity" | wc -l)
        
        if [ "$$DATASET_EXISTS" -gt "0" ]; then
          echo "✅ Dataset 'smartcity' already exists"
        else
          echo "📦 Creating dataset 'smartcity'..."
          
          # Try creating with different methods (depends on Fuseki version)
          # Method 1: via $$$/datasets endpoint
          curl -X POST \
            -H "Content-Type: application/x-www-form-urlencoded" \
            --data "dbName=smartcity&dbType=tdb2" \
            http://fuseki:3030/$$/datasets
          
          # Method 2: If authentication needed
          curl -X POST \
            -u admin:admin123 \
            -H "Content-Type: application/x-www-form-urlencoded" \
            --data "dbName=smartcity&dbType=tdb2" \
            http://fuseki:3030/$$/datasets
          
          sleep 5
          echo "✅ Dataset creation attempted"
        fi
        
        # Check if data already loaded
        echo "🔍 Checking if ontology data is already loaded..."
        TRIPLE_COUNT=$$(curl -s -X POST \
          -H "Accept: application/sparql-results+json" \
          -H "Content-Type: application/sparql-query" \
          --data "SELECT (COUNT(*) as ?count) WHERE { ?s ?p ?o }" \
          http://fuseki:3030/smartcity/query 2>/dev/null | grep -o '"value":"[0-9]*"' | head -1 | grep -o '[0-9]*' || echo "0")
        
        echo "📊 Current triple count: $${TRIPLE_COUNT:-0}"
        
        if [ "$${TRIPLE_COUNT:-0}" -gt "10" ]; then
          echo "✅ Data already loaded. Skipping ontology upload."
        else
          echo "📤 Loading ontology into Fuseki..."
          
          # List available files
          echo "📂 Available files in /data:"
          ls -la /data/ || true
          
          # Try loading the RDF file
          if [ -f "/data/WebSemEsprit (1).rdf" ]; then
            echo "📤 Uploading WebSemEsprit (1).rdf..."
            
            curl -v -X POST \
              -H "Content-Type: application/rdf+xml" \
              --data-binary "@/data/WebSemEsprit (1).rdf" \
              http://fuseki:3030/smartcity/data 2>&1
            
            if [ $$? -eq 0 ]; then
              echo "✅ Ontology loaded successfully!"
              sleep 3
              
              # Verify data loaded
              NEW_COUNT=$$(curl -s -X POST \
                -H "Accept: application/sparql-results+json" \
                -H "Content-Type: application/sparql-query" \
                --data "SELECT (COUNT(*) as ?count) WHERE { ?s ?p ?o }" \
                http://fuseki:3030/smartcity/query 2>/dev/null | grep -o '"value":"[0-9]*"' | head -1 | grep -o '[0-9]*' || echo "0")
              
              echo "📊 New triple count: $${NEW_COUNT:-0}"
            else
              echo "❌ Failed to load ontology"
            fi
          else
            echo "⚠️  Ontology file not found at /data/WebSemEsprit (1).rdf"
          fi
          
          # Load parking station sample data if exists
          if [ -f "/data/sampledataParking/sample_parking_data.ttl" ]; then
            echo "📤 Loading parking station sample data..."
            curl -X POST \
              -H "Content-Type: text/turtle" \
              --data-binary "@/data/sampledataParking/sample_parking_data.ttl" \
              http://fuseki:3030/smartcity/data 2>&1
            
            if [ $$? -eq 0 ]; then
              echo "✅ Parking data loaded!"
            fi
          fi
        fi
        
        echo "🎉 Initialization complete!"
    restart: "no"

networks:
  smartcity-network:
    driver: bridge
    name: smartcity-network

volumes:
  fuseki-data:
    driver: local
    name: smartcity-fuseki-data